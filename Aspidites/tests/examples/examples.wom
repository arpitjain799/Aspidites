`first-class functions`
#curried
(Add(x = 3 -> int; y = 3 -> int)) int
	<*>x+y

`generators`
(Yield123()) coroutine
	<^>1
	<^>2
	<^>3

(sieve(n = /0 -> int; limit = /0 -> int; is_prime = [/0] -> *)) *
    i<@>range(n*n, limit+1, n)
        f = False
        is_prime = is_prime[$]i,f
    <*>is_prime

(primes_upto(limit = 4 -> int)) list(int)
    primes = [] -> list
    f = [False, False] -> list(bool)
    t = [True] -> list(bool)
    u = limit - 1 -> int
    tt = t * u -> list(bool)
    is_prime = flatten(f[^]tt) -> list(bool)
    limit_sqrt = limit ** 0.5 -> float
    iter1 = int(limit_sqrt + 1.5) -> int

    n<@>range(iter1)
        is_prime[n]<?>is_prime = sieve(n, limit, is_prime)

    i,prime<@>enumerate(is_prime)
        prime<?>primes = primes[^]i
    <*>primes

`first-class functions`
(loop(x = 3 -> *)) coroutine
    i<@>range(x)
        Match(i)

(loop10()) coroutine
    i<@>count()
        i % 2 == 0 && True<?>print(i)
        <$>i > 10
        <%>i == 10

(walk()) *
    <#>

(swim()) *
    <#>

(critter(x = '' -> str)) *
    (!)x
        "fins" : type('SeaCritter', {'swim': swim})
        "legs" : type('LandCritter', {'walk': walk})
    <*>x

Critter = type('Critter', {'create': critter})

`matching is valid in a function body`
(match(xy = 0 -> int)) *
    (!)xy
        0: Add(xy, 1)
        1: Add(xy, 2)
      ...: Add(xy, 3)
    <*>xy

nullity = /0

test_factorial = 5!

test_unary_add = +5

test_unary_sub = -5

(FirstElem(x = [0] -> list(type(t)))) type(t)
    <*>x[0:1]


`persistent vectors`
D = [2, 4, 6, 8, 10]
`evolver vectors`
E = [12, 14, 16, 18]...

idx = D[!]4
count = D[#]4
remove = D[*]2
append = D[^]E

`persistent sets`
G = {'a', 'b', 'c'}
`evolver sets`
H = {'e', 'f', 'g'}...

`persistent mappings`
C = {'a': (3+5), 'b': 8, 'c': True, 4: None, 'd': 6**2*5+3}
`evolver mappings`
B = {'a': (3+5), 'b': 8, 'c': True, 4: None, 'd': 6**2*5+3}...


`new contracts can impose more complex contractual clauses`
colors <- list[3](int, <256)

`any woma function can be closed in place to become an instance that complies with the`
`type specification or Undefined for instances that breach the type specification contract`
x = Add(3, 3)...

`seamless exception handling allows tracing of undefined code branches`
y = Add(4, 3.5)...

`mixed usage of closure and regular function calls`
z = Add(x(), 3)

`Scala-style closure functions`
scala = (_ * 2)
val = scala(_ + _)
`This will be Undefined because of arity`
val = val(scala)...

`modulus and division by 0 handled by returning Undefined()`
denom = 0
chained = -1 / 2 / 1
div_by_zero = 1 / denom
mod_zero = 1 % denom
div_by_zero2 = 1 / 0
mod_zero2 = 1 % 0
truth = 1 + 1 == 2 >> 0
